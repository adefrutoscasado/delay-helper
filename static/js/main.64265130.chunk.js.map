{"version":3,"sources":["App.tsx","hooks.ts","reportWebVitals.ts","index.tsx"],"names":["duration","require","Title","Typography","dayjs","extend","customParseFormat","advancedFormat","weekday","localeData","weekOfYear","weekYear","disabledDate","current","subtract","endOf","now","App","desiredFinishDateValue","setDesiredFinishDateValue","useState","get","add","hour","minute","second","millisecond","toISOString","programDurationValue","setProgramDurationValue","useSessionStorage","keyName","defaultValue","storedValue","setStoredValue","React","value","window","sessionStorage","getItem","JSON","parse","setItem","stringify","err","newValue","programDuration","timeThatMachineShouldStart","delayDiff","diff","delayInHours","finishTime","startTime","_jsx","className","children","_jsxs","Space","direction","size","style","display","padding","level","DatePicker","showTime","onChange","_","dateString","TimePicker","status","isValid","undefined","Divider","orientation","format","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qWAYA,MAAMA,EAAWC,EAAQ,KACnB,MAAEC,GAAUC,IAElBC,IAAMC,OAAOL,GACbI,IAAMC,OAAOC,KACbF,IAAMC,OAAOE,KACbH,IAAMC,OAAOG,KACbJ,IAAMC,OAAOI,KACbL,IAAMC,OAAOK,KACbN,IAAMC,OAAOM,KACbP,IAAMC,OAAOC,KAIb,MAAMM,EAAgBC,GAEbA,GAAWA,EAAUT,MAAQU,SAAS,EAAG,OAAOC,MAAM,OAGzDC,EAAMZ,MAqFGa,MAnFHA,KACV,MAAOC,EAAwBC,GAA6BC,oBAAS,IAG5DJ,EAAIK,IAAI,QAAU,EACvBL,EAAIM,IAAI,EAAG,OAAOC,KAAK,GAAGC,OAAO,GAAGC,OAAO,GAAGC,YAAY,GAAGC,cAE7DX,EAAIM,IAAI,EAAG,OAAOC,KAAK,GAAGC,OAAO,GAAGC,OAAO,GAAGC,YAAY,GAAGC,iBAG1DC,EAAsBC,GCxCEC,EAACC,EAAiBC,KACjD,MAAOC,EAAaC,GAAkBC,IAAMf,UAAS,KACnD,IACE,MAAMgB,EAAQC,OAAOC,eAAeC,QAAQR,GAE5C,OAAIK,EACKI,KAAKC,MAAML,IAElBC,OAAOC,eAAeI,QAAQX,EAASS,KAAKG,UAAUX,IAC/CA,EAEX,CAAE,MAAOY,GACP,OAAOZ,CACT,KAUF,MAAO,CAACC,EAPUY,IAChB,IACER,OAAOC,eAAeI,QAAQX,EAASS,KAAKG,UAAUE,GACxD,CAAE,MAAOD,GAAM,CACfV,EAAeW,EAAS,EAGI,EDiB0Bf,CAAkB,mBAAoBd,EAAIO,KAAK,GAAGC,OAAO,IAAIC,OAAO,GAAGC,YAAY,GAAGC,eAExImB,EAAkB1C,IAAMwB,GAExBmB,EAA6B3C,IAAMc,GACtCJ,SAASgC,EAAgBzB,IAAI,QAAS,SACtCP,SAASgC,EAAgBzB,IAAI,UAAW,WACxCP,SAASgC,EAAgBzB,IAAI,UAAW,WAErC2B,EAAY5C,IAAM2C,GAA4BE,KAAK7C,OAGnD8C,EAFQ9C,IAAM4C,GAEO3B,IAAI,QAAU,EAEnC8B,EAAa/C,MAChBkB,IAAIwB,EAAgBzB,IAAI,QAAS,SACjCC,IAAIwB,EAAgBzB,IAAI,UAAW,WACnCC,IAAIwB,EAAgBzB,IAAI,UAAW,WACnCC,IAAI4B,EAAc,SAEfE,EAAYhD,MACfkB,IAAI4B,EAAc,SAErB,OACEG,cAAA,OAAKC,UAAU,MAAKC,SAClBC,eAACC,IAAK,CAACC,UAAU,WAAWC,KAAK,SAASC,MAAO,CAAEC,QAAS,OAAQC,QAAS,QAASP,SAAA,CACpFC,eAAA,OAAAD,SAAA,CACEF,cAACnD,EAAK,CAAC6D,MAAO,EAAER,SAAC,wBACjBF,cAACW,IAAU,CACTpD,aAAcA,EACdqD,UAAQ,EAERjC,aAAc5B,IAAMc,GACpBgD,SAAUA,CAACC,EAAGC,KACRA,GACFjD,EAA0BiD,EAC5B,OAINZ,eAAA,OAAAD,SAAA,CACEF,cAACnD,EAAK,CAAC6D,MAAO,EAAER,SAAC,qBACjBF,cAACgB,IACC,CACArC,aAAc5B,IAAMwB,GACpBsC,SAAUA,CAACC,EAAGC,KACRA,GACFvC,EAAwBzB,IAAMgE,EAAY,YAAYzC,cACxD,EAEF2C,OAASlE,IAAMwB,GAAsB2C,eAAsBC,EAAV,aAGrDnB,cAACoB,IAAO,CAACC,YAAY,OAAMnB,SAAC,YAC5BC,eAAA,OAAAD,SAAA,CACEF,cAACnD,EAAK,CAAC6D,MAAO,EAAER,SAAC,iBACjBC,eAAA,OAAAD,SAAA,CACGL,EAAa,eAGlBM,eAAA,OAAAD,SAAA,CACEF,cAACnD,EAAK,CAAC6D,MAAO,EAAER,SAAC,eAChBH,EAAUuB,OAAO,0BAEpBnB,eAAA,OAAAD,SAAA,CACEF,cAACnD,EAAK,CAAC6D,MAAO,EAAER,SAAC,gBAChBJ,EAAWwB,OAAO,8BAGnB,EElGKC,MAZUC,IACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAKC,IAAkD,IAAjD,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,QAAEC,GAASL,EACpEC,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAQR,EAAY,GAExB,ECLFS,IAASC,OACPlC,cAAClB,IAAMqD,WAAU,CAAAjC,SACfF,cAACpC,EAAG,MAENwE,SAASC,eAAe,SAM1Bd,G","file":"static/js/main.64265130.chunk.js","sourcesContent":["import { useState } from 'react'\nimport { TimePicker, Card, Typography, Space, Divider, DatePicker } from 'antd'\nimport { useSessionStorage } from './hooks'\nimport dayjs from 'dayjs'\nimport customParseFormat from 'dayjs/plugin/customParseFormat'\nimport advancedFormat from 'dayjs/plugin/advancedFormat'\nimport localeData from 'dayjs/plugin/localeData'\nimport weekday from 'dayjs/plugin/weekday'\nimport weekOfYear from 'dayjs/plugin/weekOfYear'\nimport weekYear from 'dayjs/plugin/weekYear'\nimport 'antd/dist/antd.css'\nimport './App.css'\nconst duration = require('dayjs/plugin/duration')\nconst { Title } = Typography\n\ndayjs.extend(duration)\ndayjs.extend(customParseFormat)\ndayjs.extend(advancedFormat)\ndayjs.extend(weekday)\ndayjs.extend(localeData)\ndayjs.extend(weekOfYear)\ndayjs.extend(weekYear)\ndayjs.extend(customParseFormat)\n\n\n// eslint-disable-next-line arrow-body-style\nconst disabledDate = (current: any) => {\n  // Can not select days before today and today\n  return current && current < dayjs().subtract(1, 'day').endOf('day');\n}\n\nconst now = dayjs()\n\nconst App = () => {\n  const [desiredFinishDateValue, setDesiredFinishDateValue] = useState(() => {\n    // Example: if time is 23:30, should sum 1 day\n    // Example: if time is 00:30, should NOT sum 1 day\n    return now.get('hour') < 8 ?\n      now.add(0, 'day').hour(8).minute(0).second(0).millisecond(0).toISOString()\n      :\n      now.add(1, 'day').hour(8).minute(0).second(0).millisecond(0).toISOString()\n  })\n\n  const [programDurationValue, setProgramDurationValue] = useSessionStorage('program-duration', now.hour(3).minute(50).second(0).millisecond(0).toISOString())\n\n  const programDuration = dayjs(programDurationValue)\n\n  const timeThatMachineShouldStart = dayjs(desiredFinishDateValue)\n    .subtract(programDuration.get('hour'), 'hours')\n    .subtract(programDuration.get('minute'), 'minutes')\n    .subtract(programDuration.get('second'), 'seconds')\n\n  const delayDiff = dayjs(timeThatMachineShouldStart).diff(dayjs())\n  const delay = dayjs(delayDiff)\n\n  const delayInHours = delay.get('hour') - 1 // always subtract 1 hour since we cannot choose minutes of delay\n\n  const finishTime = dayjs()\n    .add(programDuration.get('hour'), 'hours')\n    .add(programDuration.get('minute'), 'minutes')\n    .add(programDuration.get('second'), 'seconds')\n    .add(delayInHours, 'hours')\n\n  const startTime = dayjs()\n    .add(delayInHours, 'hours')\n\n  return (\n    <div className=\"app\">\n      <Space direction=\"vertical\" size=\"middle\" style={{ display: 'flex', padding: '24px' }}>\n        <div>\n          <Title level={5}>Desired finish time</Title>\n          <DatePicker\n            disabledDate={disabledDate}\n            showTime\n            // @ts-ignore\n            defaultValue={dayjs(desiredFinishDateValue)}\n            onChange={(_, dateString) => {\n              if (dateString) {\n                setDesiredFinishDateValue(dateString)\n              }\n            }}\n          />\n        </div>\n        <div>\n          <Title level={5}>Program duration</Title>\n          <TimePicker\n            // @ts-ignore\n            defaultValue={dayjs(programDurationValue)}\n            onChange={(_, dateString) => {\n              if (dateString) {\n                setProgramDurationValue(dayjs(dateString, 'HH:mm:ss').toISOString())\n              }\n            }}\n            status={!dayjs(programDurationValue).isValid() ? \"error\" : undefined}\n          />\n        </div>\n        <Divider orientation=\"left\">Results</Divider>\n        <div>\n          <Title level={5}>Delay to set</Title>\n          <div>\n            {delayInHours} hours\n          </div>\n        </div>\n        <div>\n          <Title level={5}>Start time</Title>\n          {startTime.format('DD/MM/YYYY HH:mm:ss')}\n        </div>\n        <div>\n          <Title level={5}>Finish time</Title>\n          {finishTime.format('DD/MM/YYYY HH:mm:ss')}\n        </div>\n      </Space>\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\n\n\nexport const useSessionStorage = (keyName: string, defaultValue: string) => {\n  const [storedValue, setStoredValue] = React.useState(() => {\n    try {\n      const value = window.sessionStorage.getItem(keyName)\n\n      if (value) {\n        return JSON.parse(value)\n      } else {\n        window.sessionStorage.setItem(keyName, JSON.stringify(defaultValue))\n        return defaultValue\n      }\n    } catch (err) {\n      return defaultValue\n    }\n  })\n\n  const setValue = (newValue: string) => {\n    try {\n      window.sessionStorage.setItem(keyName, JSON.stringify(newValue))\n    } catch (err) {}\n    setStoredValue(newValue)\n  }\n\n  return [storedValue, setValue]\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}